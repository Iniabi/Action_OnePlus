name: Workflow Cleanup

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      cleanup_mode:
        description: 'Cleanup mode'
        required: true
        type: choice
        options: ['default_cleanup', 'clear_all_failures', 'clear_all_workflows']
        default: default_cleanup

permissions:
  actions: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Dependencies
        run: pip install pygithub
      - name: Cleanup Workflows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODE: ${{ inputs.cleanup_mode }}
        run: |
          cat << 'EOF' > cleanup.py
          from github import Github
          from datetime import datetime, timedelta
          import os, time

          mode = os.getenv('MODE', 'default_cleanup')
          repo = Github(os.getenv('GITHUB_TOKEN')).get_repo(os.getenv('GITHUB_REPOSITORY'))

          days_to_keep = 0 if mode in ['clear_all_failures', 'clear_all_workflows'] else 3
          max_runs = 0 if mode in ['clear_all_failures', 'clear_all_workflows'] else 10
          status = 'all' if mode == 'clear_all_workflows' else 'failure'
          cutoff = datetime.utcnow() - timedelta(days=days_to_keep)

          deleted = 0
          for wf in repo.get_workflows():
              runs = wf.get_runs(status=status) if status != 'all' else wf.get_runs()
              kept = 0
              for run in sorted(runs, key=lambda r: r.created_at):
                  if run.status in ['queued', 'in_progress']:
                      continue
                  if mode == 'default_cleanup' and (kept < max_runs or run.created_at > cutoff):
                      kept += 1
                      continue
                  try:
                      run.delete()
                      deleted += 1
                  except:
                      continue
              time.sleep(1)

          print(f"Cleanup done! Processed {repo.get_workflows().totalCount} workflows, deleted {deleted} runs")
          EOF
          python cleanup.py