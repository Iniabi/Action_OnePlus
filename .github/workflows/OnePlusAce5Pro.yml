name: OnePlus Ace5Pro

on:
  # schedule:
  #   - cron: '0 0 */3 * *'
  workflow_dispatch:
    inputs:
      FILE:
        description: "Select configuration"
        required: true
        type: choice
        default: JiuGeFaCai_oneplus_ace5_pro_v
        options: ['oneplus_ace5_pro', 'JiuGeFaCai_oneplus_ace5_pro_v']
      BUILD_METHOD:
        description: "Build method"
        required: true
        type: choice
        options: ['Bazel', 'Clang']
        default: Clang
      KERNEL_TIME:
        description: "Build date"
        required: true
        default: '2024-12-04 02:11:46 UTC'
      KERNEL_NAME:
        description: "Kernel name"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444-4k'
      enable_KPM:
        description: "Enable KPM"
        required: false
        default: false
        type: boolean
      Release:
        description: "Create Release"
        required: false
        default: false
        type: boolean
        
permissions:
  contents: write

jobs:
  build:
    name: >-
      ${{ 
        (github.event_name == 'schedule' && 'JiuACE5Pro') ||
        (inputs.FILE == 'oneplus_ace5_pro' && 'ACE5Pro') ||
        (inputs.FILE == 'JiuGeFaCai_oneplus_ace5_pro_v' && 'JiuACE5Pro')
      }}
      (${{ 
        (github.event_name == 'schedule' && 'Clang') ||
        (inputs.BUILD_METHOD == 'Clang' && 'Clang') || 
        'Bazel' 
      }})
    runs-on: ubuntu-latest
    steps:
      - name: Set Trigger and Environment
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "FILE=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
            echo "BUILD_METHOD=Clang" >> $GITHUB_ENV
            echo "KERNEL_TIME=2024-12-04 02:11:46 UTC" >> $GITHUB_ENV
            echo "KERNEL_NAME=-android15-8-g013ec21bba94-abogki383916444-4k" >> $GITHUB_ENV
            echo "enable_KPM=false" >> $GITHUB_ENV
            echo "Release=false" >> $GITHUB_ENV
          else
            echo "FILE=${{ inputs.FILE }}" >> $GITHUB_ENV
            echo "BUILD_METHOD=${{ inputs.BUILD_METHOD }}" >> $GITHUB_ENV
            echo "KERNEL_TIME=${{ inputs.KERNEL_TIME }}" >> $GITHUB_ENV
            echo "KERNEL_NAME=${{ inputs.KERNEL_NAME }}" >> $GITHUB_ENV
            echo "enable_KPM=${{ inputs.enable_KPM }}" >> $GITHUB_ENV
            echo "Release=${{ inputs.Release }}" >> $GITHUB_ENV
          fi

          WORKSPACE_DIR="$GITHUB_WORKSPACE/kernel_workspace"
          PLATFORM_DIR="$WORKSPACE_DIR/kernel_platform"
          COMMON_DIR="$PLATFORM_DIR/common"
          DEFCONFIG="$COMMON_DIR/arch/arm64/configs/gki_defconfig"
          
          echo "DEFCONFIG=$DEFCONFIG" >> $GITHUB_ENV
          echo "WORKSPACE=$WORKSPACE_DIR" >> $GITHUB_ENV
          echo "PLATFORM=$PLATFORM_DIR" >> $GITHUB_ENV
          echo "COMMON=$COMMON_DIR" >> $GITHUB_ENV
          echo "DIST_DIR=$PLATFORM_DIR/output" >> $GITHUB_ENV

      - name: Set Device
        run: |
          DEVICE="${{ env.FILE }}"
          DEVICE="${DEVICE#*oneplus_}"
          DEVICE="${DEVICE%%_*}"
          DEVICE="$(echo "$DEVICE" | sed -E 's/^([0-9]+)([a-z]+)/\1\U\2/; s/^([a-z])/\U\1/')"
          DEVICE+="$(echo "${{ env.FILE }}" | sed -nE 's/.*_pro.*/Pro/p')"
          echo "DEVICE=OnePlus$DEVICE" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          git config --global user.name "build"
          git config --global user.email "anexplreaders@gmail.com"
          sudo apt update && sudo apt install libelf-dev -y
          
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Repo Sync
        run: |
          mkdir "$WORKSPACE" && cd "$WORKSPACE"
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${{ env.FILE }}.xml --depth=1
          repo sync -c -j$(nproc --all)

      - name: Set SukiSU
        run: |
          cd "$PLATFORM"
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          echo "VERSION：$KSU_VERSION"

          cd "$WORKSPACE"
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch "$COMMON/"
          cp ./susfs4ksu/kernel_patches/fs/* "$COMMON/fs/"
          cp ./susfs4ksu/kernel_patches/include/linux/* "$COMMON/include/linux/"
          cp ./SukiSU_patch/hooks/syscall_hooks.patch "$COMMON/"
          
          cd "$COMMON"
          # sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
          # sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
          patch -p1 < "50_add_susfs_in_gki-android15-6.6.patch"
          
          patch -p1 -F 3 < "syscall_hooks.patch"

      - name: Configure Kernel
        run: |
          cd "$WORKSPACE"
          git clone https://github.com/Iniabi/sched_ext
          mv ./sched_ext/hmbird_patch.c "$PLATFORM/common/drivers"
          cd "$PLATFORM/common/drivers"
          echo "obj-y += hmbird_patch.o" >> Makefile
          cp -r "$WORKSPACE/sched_ext/"* "$COMMON/kernel/sched/"
          
          rm $PLATFORM/common/android/abi_gki_protected_exports_*
          rm $PLATFORM/msm-kernel/android/abi_gki_protected_exports_*
          
          sed -i 's/check_defconfig//' "$PLATFORM/common/build.config.gki"
          sed -i '$s|echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"|echo "\${KERNELVERSION}${{ env.KERNEL_NAME }}"|' "$COMMON/scripts/setlocalversion"

          [[ "${{ env.enable_KPM }}" == "true" ]] && echo "CONFIG_KPM=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$DEFCONFIG"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=n" >> "$DEFCONFIG"
          
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> $DEFCONFIG
          echo "CONFIG_TCP_CONG_BBR=y" >> $DEFCONFIG
          echo "CONFIG_TCP_CONG_BIC=n" >> $DEFCONFIG
          echo "CONFIG_TCP_CONG_CUBIC=n" >> $DEFCONFIG
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> $DEFCONFIG
          echo "CONFIG_TCP_CONG_HTCP=n" >> $DEFCONFIG
          echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> $DEFCONFIG

      - name: Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.BUILD_METHOD == 'Bazel' && env.DIST_DIR || env.COMMON }}/out
          key: build-${{ runner.os }}-${{ env.BUILD_METHOD }}-${{ env.DEVICE }}
          restore-keys: |
            build-${{ runner.os }}-${{ env.BUILD_METHOD }}-${{ env.DEVICE }}-

      - name: Build Kernel
        run: |
          if [[ "${{ env.BUILD_METHOD }}" == "Bazel" ]]; then
            cd "$PLATFORM"
            
            export SOURCE_DATE_EPOCH=$(date -d "${{ env.KERNEL_TIME }}" +%s)
            echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> "$GITHUB_ENV"
            
            tools/bazel run --jobs=$(nproc) --lto=thin --config=stamp //common:kernel_aarch64_dist -- --dist_dir=output || { echo "内核构建失败"; exit 1; }
          elif [[ "${{ env.BUILD_METHOD }}" == "Clang" ]]; then
            cd "$COMMON"
            
            PREBUILT_CLANG="${{ env.PLATFORM }}/prebuilts/clang/host/linux-x86/clang-r510928/bin"
            PREBUILT_RUST="${{ env.PLATFORM }}/prebuilts/rust/linux-x86/1.73.0b/bin"
            PREBUILT_KERNEL_TOOLS="${{ env.PLATFORM }}/prebuilts/kernel-build-tools/linux-x86/bin"
            
            export KBUILD_BUILD_TIMESTAMP=$(date -d "${{ env.KERNEL_TIME }}" -u "+%a %b %d %H:%M:%S %Z %Y")
            export KBUILD_BUILD_USER="kleaf"
            export KBUILD_BUILD_HOST="build-host"
            export PATH="$PREBUILT_CLANG:$PATH"
            export PATH="$PREBUILT_RUST:$PATH"
            export PATH="$PREBUILT_KERNEL_TOOLS:$PATH"

            echo "CONFIG_LTO_CLANG_THIN=y" >> ${{ env.DEFCONFIG }}
            
            BUILD_ARGS=(
              "-j$(nproc --all)"
              "LLVM=1"
              "O=out"
              "ARCH=arm64"
              "CC=$PREBUILT_CLANG/clang"
              "LD=$PREBUILT_CLANG/ld.lld"
              "AR=$PREBUILT_CLANG/llvm-ar"
              "NM=$PREBUILT_CLANG/llvm-nm"
              "RUSTC=$PREBUILT_RUST/rustc"
              "CROSS_COMPILE=aarch64-linux-gnu-"
              "OBJCOPY=$PREBUILT_CLANG/llvm-objcopy"
              "PAHOLE=$PREBUILT_KERNEL_TOOLS/pahole"
            )
          
            make "${BUILD_ARGS[@]}" gki_defconfig Image
          fi
                
      - name: Move Kernel Image
        run: |
          cd "$WORKSPACE" && mkdir -p Out
          
          git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1
          
          if [[ "${{ env.BUILD_METHOD }}" == "Bazel" ]]; then
            IMAGE_DIR="$PLATFORM/output/"
          else
            IMAGE_DIR="$COMMON/out/arch/arm64/boot/"
          fi
          
          cp "$IMAGE_DIR/Image" "$WORKSPACE/AnyKernel3/"
          cp "$IMAGE_DIR/Image" "$WORKSPACE/Out/"
          
      - name: Patch Kernel
        if: ${{ env.enable_KPM == 'true' }}
        run: |
          cd "$WORKSPACE/Out"
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux && ./patch_linux
          rm -rf patch_linux
          cp oImage "$WORKSPACE/AnyKernel3/Image"

      - name: Make Ak3
        run: |
          cd "$WORKSPACE/AnyKernel3"
          zip -r "$WORKSPACE/Out/${{ env.DEVICE }}-${{ env.KSUVER }}.zip" *
          
      - name: Upload Ak3
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.DEVICE }}-${{ env.KSUVER }}"
          path: ${{ env.WORKSPACE }}/AnyKernel3/*
          
      - name: Create Release
        if: ${{ env.Release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ env.DEVICE }}-${{ env.KSUVER }}"
          tag_name: "${{ env.KSUVER }}-${{ env.DEVICE }}"
          body: |
            - Build method: `${{ env.BUILD_METHOD }}`
            - Enable KPM: `${{ env.enable_KPM }}`
          files: |
            ${{ env.WORKSPACE }}/Out/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean Build Artifacts
        if: ${{ env.BUILD_METHOD == 'Bazel' }}
        run: |
          rm -rf "${{ env.WORKSPACE }}/SukiSU_patch"
          rm -rf "${{ env.WORKSPACE }}/susfs4ksu"
          rm -rf "${{ env.WORKSPACE }}/sched_ext"
          find "${{ env.PLATFORM }}" -mindepth 1 -maxdepth 1 ! -name "output" -exec rm -rf {} +
          find . -name '*.tmp' -delete